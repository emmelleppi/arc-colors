/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useCallback, useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei/useGLTF'
import { useWheel } from './store'
import { useSpring, a } from '@react-spring/three'

function Cylinder(props) {
  const [color, setColor] = useState(() => Math.round(4 * Math.random()))
  const palette = useWheel((s) => s.palette)
  const handleClick = useCallback(e => {
    e.stopPropagation()
    setColor(s => (s+1)%5)
  },[setColor])
  return (
    <mesh castShadow receiveShadow onClick={handleClick} {...props}>
      <meshPhysicalMaterial metalness={0.8} roughness={1} color={palette[color]}/>
    </mesh>
  )
}

export default function Model(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/Color.gltf')
  const wheelOpen = useWheel((s) => s.wheelOpen)
  const [localOpen, setLocalOpen] = useState(wheelOpen)

  const springRef = useRef()
  const { posZ,posY} = useSpring({
    ref: springRef,
    posZ: 0,
    posY: 0
  })

  useEffect(() => {
      springRef.current.start({
        posZ: wheelOpen ? -4 : 0,
        posY: wheelOpen ? -2 : 0,
        delay: wheelOpen ? 0 : 1500,
        onRest: () => setLocalOpen(true)
      })
  }, [localOpen, setLocalOpen, wheelOpen])

  return (
    <group {...props} dispose={null}>
      <group ref={group} position={[-0.54, 1.08, 1.69]}>
      {new Array(36).fill().map((_, index) => (
        <Cylinder key={`0${index}`} geometry={nodes[`Cylinder${index===0? "": index<10 ? `00${index}`:`0${index}`}`].geometry} rotation={[0, 0, -Math.PI / 2]} />
      ))}
      </group>
      <mesh receiveShadow castShadow material={materials.black} geometry={nodes.Cube.geometry} position={[0, 1, 0]}>
        <a.mesh
          position-y={posY}
          position-z={posZ}
          receiveShadow
          castShadow
          renderOrder={1}
          geometry={nodes.Slice.geometry}
        >
            <meshPhysicalMaterial
              transmission={1}
              metalness={0.3}
              clearcoat={1}
              roughness={1}
              transparent
              color="black"
            />
        </a.mesh>
      </mesh>
    </group>
  )
}

useGLTF.preload('/Color.gltf')
