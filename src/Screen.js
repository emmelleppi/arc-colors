/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei/useGLTF'
import { useSpring, a } from '@react-spring/three'
import { useFrame, extend } from 'react-three-fiber'
import lerp from 'lerp'
import { useWheel } from './store'
import { RoundedBoxBufferGeometry } from 'three/examples/jsm/geometries/RoundedBoxBufferGeometry'
extend({ RoundedBoxBufferGeometry })

export default function Screen({ color, opacity, ...props }) {
  const ref = useRef()
  const { nodes, materials } = useGLTF('/Screen.gltf')
  const scale = opacity === 1 ? 1.4 : 1
  const toggle = useWheel((s) => s.toggleWheel)
  const wheelOpen = useWheel((s) => s.wheelOpen)
  const setPalette = useWheel((s) => s.setPalette)
  const [localOpen, setLocalOpen] = useState(wheelOpen)

  useFrame(() => {
    const newScale = lerp(ref.current.scale.x, scale, 0.1)
    ref.current.scale.set(newScale, newScale, newScale)
  })
  const springOpacityRef = useRef()
  const { springOpacity } = useSpring({
    ref: springOpacityRef,
    springOpacity: opacity
  })

  useEffect(() => {
    if (localOpen) {
      springOpacityRef.current.start({
        springOpacity: opacity
      })
      if (!wheelOpen) {
        setLocalOpen(false)
      }
    } else {
      springOpacityRef.current.start({
        springOpacity: opacity,
        delay: wheelOpen ? 1000 : 0,
        onRest: () => setLocalOpen(true)
      })
    }
    if (opacity === 1) {
      setPalette(color)
    }
  }, [localOpen, setLocalOpen, wheelOpen, opacity, setPalette, color])

  return (
    <group
      visible={opacity > 0.01}
      onClick={(e) => {
        e.stopPropagation()
        if (opacity === 1) {
          toggle()
        }
      }}
      ref={ref}
      {...props}>
      <group position={[1, -0.51, 1]} scale={[1.27, 1.27, 1.27]} dispose={null} rotation={[0, Math.PI / 2, 0]}>
        <mesh geometry={nodes.Slice001.geometry} position={[0.97, 0.39, -0.91]} renderOrder={0} scale={[15, 1, 1]}>
          <a.meshPhysicalMaterial color="black" metalness={1} clearcoat={1} roughness={1} transparent opacity={springOpacity} />
        </mesh>
        <a.mesh receiveShadow castShadow geometry={nodes.Slice.geometry} renderOrder={1}>
          <a.meshPhysicalMaterial
            transmission={2}
            metalness={0.2}
            clearcoat={1}
            roughness={0}
            transparent
            color="white"
            opacity={springOpacity}
          />
        </a.mesh>
      </group>
      {color
        ? color.map((c, i) => (
            <mesh key={`0${i}`} position-x={(i - 2.5) / 3.8} position-z={-0.24} renderOrder={0}>
              <boxBufferGeometry args={[0.265, 0.8, 0.02]} />
              <a.meshStandardMaterial color={c} transparent opacity={springOpacity} />
            </mesh>
          ))
        : null}
    </group>
  )
}

useGLTF.preload('/Screen.gltf')
